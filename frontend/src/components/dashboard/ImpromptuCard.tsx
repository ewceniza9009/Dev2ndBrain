import React, { useState, useEffect, useCallback } from 'react';
import { db } from '../../services/db';
import { SparklesIcon, PlayIcon, ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/20/solid';
import type { Flashcard } from '../../types';
import { useNavigate } from 'react-router-dom';

const ImpromptuCard: React.FC = () => {
Â  const [currentCard, setCurrentCard] = useState<Flashcard | null>(null);
Â  const [cardCount, setCardCount] = useState(0);
Â  const [isFlipped, setIsFlipped] = useState(false);
Â  const navigate = useNavigate();

Â  const loadRandomCard = useCallback(async () => {
    // VITAL FIX: Use .filter() to correctly count all non-deleted cards.
Â  Â  const count = await db.flashcards.filter(c => !c.isDeleted).count();
Â  Â  setCardCount(count);

Â  Â  if (count > 0) {
Â  Â  Â  const randomIndex = Math.floor(Math.random() * count);
Â  Â  Â  const randomCards = await db.flashcards.filter(c => !c.isDeleted).offset(randomIndex).limit(1).toArray();
Â  Â  Â  if (randomCards.length > 0) {
Â  Â  Â  Â  setCurrentCard(randomCards[0]);
Â  Â  Â  Â  setIsFlipped(false);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  setCurrentCard(null);
Â  Â  }
Â  }, []);

Â  useEffect(() => {
Â  Â  loadRandomCard();
Â  }, [loadRandomCard]);

Â  const handleFlip = () => {
Â  Â  setIsFlipped(true);
Â  };

Â  const handleNavigateToDecks = () => {
Â  Â  navigate('/flashcards');
Â  };

Â  if (cardCount === 0) {
Â  Â  return (
Â  Â  Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-6 flex flex-col items-center justify-center space-y-4 h-full min-h-[250px] transition-all duration-300">
Â  Â  Â  Â  <SparklesIcon className="h-12 w-12 text-gray-400 dark:text-gray-500" />
Â  Â  Â  Â  <p className="text-gray-500 dark:text-gray-400 text-center">Add some flashcards to get impromptu questions!</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!currentCard) {
Â  Â  return null;
Â  }

Â  return (
Â  Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-6 h-full flex flex-col justify-between transition-all duration-300">
Â  Â  Â  <div className="flex-grow flex flex-col justify-center">
Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4 text-center">Daily Brain Teaser ðŸ¤”</h2>
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-700 p-6 rounded-xl shadow-md min-h-[100px] flex flex-col items-center justify-center text-center transition-all duration-300">
Â  Â  Â  Â  Â  {!isFlipped ? (
Â  Â  Â  Â  Â  Â  <p className="text-lg font-medium text-gray-900 dark:text-white" dangerouslySetInnerHTML={{ __html: currentCard.question }} />
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className="flex flex-col items-center space-y-2">
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 dark:text-gray-400 font-normal">Answer:</p>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-bold text-yellow-600 dark:text-blue-400" dangerouslySetInnerHTML={{ __html: currentCard.answer }} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â Â 
Â  Â  Â  <div className="mt-6">
Â  Â  Â  Â  {!isFlipped ? (
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleFlip}
Â  Â  Â  Â  Â  Â  className="w-full flex items-center justify-center space-x-2 px-6 py-3 font-semibold text-white bg-teal-600 rounded-full hover:bg-teal-700 disabled:bg-gray-500 shadow-lg transition-all duration-300 transform hover:scale-105"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <PlayIcon className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  <span>Show Answer</span>
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="flex space-x-2">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={loadRandomCard}
Â  Â  Â  Â  Â  Â  Â  className="flex-grow flex items-center justify-center space-x-2 px-4 py-3 font-semibold text-white bg-blue-600 rounded-full hover:bg-blue-700 shadow-lg transition-all duration-300 transform hover:scale-105"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <span>Next Card</span>
Â  Â  Â  Â  Â  Â  Â  <ChevronRightIcon className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleNavigateToDecks}
Â  Â  Â  Â  Â  Â  Â  className="flex items-center justify-center px-4 py-3 font-semibold text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-700 rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 shadow-md transition-all duration-300"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <ChevronLeftIcon className="h-5 w-5" />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ImpromptuCard;
import React, { useCallback, useState, useRef, useEffect } from 'react';
import { useNoteStore } from '../../stores/useNoteStore';
import { useFlashcardStore } from '../../stores/useFlashcardStore';
import NoteEditor from './NoteEditor';
import NoteViewer from './NoteViewer';
import TagInput from './TagInput';
import type { Note, Deck } from '../../types';
import { debounce } from 'lodash-es';

// This is the modal component for selecting a deck
const SelectDeckModal: React.FC<{
Â  isOpen: boolean;
Â  onClose: () => void;
Â  onSelectDeck: (deckId: number, content: string) => void;
Â  decks: Deck[];
Â  noteContent: string;
}> = ({ isOpen, onClose, onSelectDeck, decks, noteContent }) => {
Â  if (!isOpen) return null;

Â  return (
Â  Â  <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
Â  Â  Â  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6">
Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4">Select a Deck</h2>
Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">Choose a destination deck for the new flashcards.</p>
Â  Â  Â  Â  <ul className="max-h-64 overflow-y-auto mb-4">
Â  Â  Â  Â  Â  {decks.map(deck => (
Â  Â  Â  Â  Â  Â  <li
Â  Â  Â  Â  Â  Â  Â  key={deck.id}
Â  Â  Â  Â  Â  Â  Â  onClick={() => onSelectDeck(deck.id!, noteContent)}
Â  Â  Â  Â  Â  Â  Â  className="p-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-teal-700 rounded cursor-pointer"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {deck.name}
Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </ul>
Â  Â  Â  Â  <button onClick={onClose} className="mt-2 px-4 py-2 bg-gray-500 rounded text-white w-full">Cancel</button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

interface NoteDetailViewProps {
Â  note: Note | null;
}

const NoteDetailView: React.FC<NoteDetailViewProps> = ({ note }) => {
Â  // Retrieve the state from localStorage on component mount
Â  const [isEditing, setIsEditing] = useState(() => {
Â  Â  const savedState = localStorage.getItem('isEditing');
Â  Â  return savedState !== null ? JSON.parse(savedState) : true;
Â  });

Â  const { deleteNote, updateNote } = useNoteStore();
Â  const editorRef = useRef<any>(null);
Â  const [editedTitle, setEditedTitle] = useState(note?.title || '');
Â  const [isDeckModalOpen, setDeckModalOpen] = useState(false);
Â  const { decks, fetchDecks, createCardsFromContent } = useFlashcardStore();
Â  const [editorContent, setEditorContent] = useState(note?.content || '');

Â  // This useEffect saves the state to localStorage whenever it changes
Â  useEffect(() => {
Â  Â  localStorage.setItem('isEditing', JSON.stringify(isEditing));
Â  }, [isEditing]);

Â  // This useEffect handles updating the component when a new note is selected
Â  useEffect(() => {
Â  Â  if (note) {
Â  Â  Â  setEditedTitle(note.title);
Â  Â  Â  setEditorContent(note.content);
Â  Â  Â  fetchDecks();
Â  Â  }
Â  }, [note, fetchDecks]);


Â  const debouncedUpdateTitle = useCallback(
Â  Â  debounce((id: number, title: string) => {
Â  Â  Â  updateNote(id, { title });
Â  Â  }, 1000),
Â  Â  []
Â  );

Â  useEffect(() => {
Â  Â  if (note && editedTitle !== note.title) {
Â  Â  Â  debouncedUpdateTitle(note.id!, editedTitle);
Â  Â  }
Â  Â  return () => debouncedUpdateTitle.cancel();
Â  }, [editedTitle, note, debouncedUpdateTitle]);


Â  const handleDelete = () => {
Â  Â  if (note && window.confirm(`Are you sure you want to delete "${note.title}"?`)) {
Â  Â  Â  deleteNote(note.id!);
Â  Â  }
Â  };

Â  const handleTagsChange = (newTags: string[]) => {
Â  Â  if (note) {
Â  Â  Â  updateNote(note.id!, { tags: newTags });
Â  Â  }
Â  };

Â  // Updated to handle content as a parameter
Â  const handleCreateFlashcards = (deckId: number, content: string) => {
Â  Â  if (note) {
Â  Â  Â  createCardsFromContent(content, deckId);
Â  Â  Â  setDeckModalOpen(false);
Â  Â  Â  alert('Flashcards created successfully!');
Â  Â  }
Â  };

Â  if (!note) {
Â  Â  return <div className="p-8 text-gray-400">Select a note from the list or create a new one.</div>;
Â  }

Â  return (
Â  Â  <div className="flex flex-col h-full p-6">
Â  Â  Â  <div className="flex justify-between items-center mb-2">
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  value={editedTitle}
Â  Â  Â  Â  Â  onChange={(e) => setEditedTitle(e.target.value)}
Â  Â  Â  Â  Â  className="text-2xl font-semibold text-gray-900 dark:text-gray-200 bg-transparent w-full focus:outline-none"
Â  Â  Â  Â  Â  placeholder="Note Title"
Â  Â  Â  Â  />
Â  Â  Â  Â  <div className="flex space-x-2 flex-shrink-0 ml-4 items-center">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => setIsEditing(!isEditing)}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 text-sm text-white rounded-lg transition-colors duration-200"
Â  Â  Â  Â  Â  Â  style={{ backgroundColor: isEditing ? 'rgb(37, 99, 235)' : 'rgb(5, 150, 105)' }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {isEditing ? 'READ' : 'EDIT'}
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  if (editorRef.current) {
Â  Â  Â  Â  Â  Â  Â  Â  setEditorContent(editorRef.current.getValue());
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  setDeckModalOpen(true);
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 text-sm bg-purple-600 rounded-lg text-white"
Â  Â  Â  Â  Â  Â  title="Create Flashcards from Note"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  ðŸ“‡ Create Flashcards
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  <button onClick={handleDelete} className="px-4 py-2 text-sm bg-red-600 rounded-lg text-white">Delete</button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  <div className="mb-4">
Â  Â  Â  Â  <TagInput tags={note.tags} onTagsChange={handleTagsChange} />
Â  Â  Â  </div>

Â  Â  Â  <div className="flex-grow pt-2 h-full">
Â  Â  Â  Â  {isEditing ? (
Â  Â  Â  Â  Â  <NoteEditor note={note} editorRef={editorRef} />
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <NoteViewer note={note} />
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {/* The modal for selecting a deck */}
Â  Â  Â  <SelectDeckModal
Â  Â  Â  Â  isOpen={isDeckModalOpen}
Â  Â  Â  Â  onClose={() => setDeckModalOpen(false)}
Â  Â  Â  Â  onSelectDeck={handleCreateFlashcards}
Â  Â  Â  Â  decks={decks}
Â  Â  Â  Â  noteContent={editorContent}
Â  Â  Â  />
Â  Â  </div>
Â  );
};

export default NoteDetailView;
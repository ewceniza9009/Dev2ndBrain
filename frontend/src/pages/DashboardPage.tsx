import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNoteStore } from '../stores/useNoteStore';
import { useLiveQuery } from 'dexie-react-hooks';
import { db } from '../services/db';
import { PlusIcon, CodeBracketSquareIcon, RectangleStackIcon } from '@heroicons/react/20/solid';
import Tabs from '../components/dashboard/Tabs';
import FlashcardSummary from '../components/dashboard/FlashcardSummary';
import RecentNotes from '../components/dashboard/RecentNotes';
import PopularTags from '../components/dashboard/PopularTags';
import AiReviewsSummary from '../components/dashboard/AiReviewsSummary';
import ImpromptuCard from '../components/dashboard/ImpromptuCard';
import RecentProjects from '../components/dashboard/RecentProjects';
import ReactMarkdown from 'react-markdown';

const ChartPlaceholder = () => (
Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-6 flex items-center justify-center h-80">
Â  Â  <p className="text-gray-500 dark:text-gray-400 text-lg">Data Visualization Coming Soon!</p>
Â  </div>
);

const DashboardPage: React.FC = () => {
Â  const navigate = useNavigate();
Â  const { addNote } = useNoteStore();
Â  const [activeTab, setActiveTab] = useState('overview');

Â  const recentlyEditedNotes = useLiveQuery(
Â  Â  () => db.notes.orderBy('updatedAt').reverse().filter(note => !note.isDeleted).limit(5).toArray(),
Â  Â  []
Â  ) || [];

Â  const recentlyEditedProjects = useLiveQuery(
Â  Â  () => db.projects.orderBy('updatedAt').reverse().filter(p => !p.isDeleted).limit(5).toArray(),
Â  Â  []
Â  ) || [];

Â  const dueFlashcardsCount = useLiveQuery(
Â  Â  () => db.flashcards
Â  Â  Â  .where('nextReview').belowOrEqual(new Date())
Â  Â  Â  .filter(card => !card.isDeleted)
Â  Â  Â  .count(),
Â  Â  []
Â  ) ?? 0;
Â  
Â  const notesCount = useLiveQuery(() => db.notes.filter(n => !n.isDeleted).count(), []) ?? 0;
Â  const snippetsCount = useLiveQuery(() => db.snippets.filter(s => !s.isDeleted).count(), []) ?? 0;
Â  const flashcardsCount = useLiveQuery(() => db.flashcards.filter(c => !c.isDeleted).count(), []) ?? 0;
Â  const projectsCount = useLiveQuery(() => db.projects.filter(p => !p.isDeleted).count(), []) ?? 0;

Â  const isAppEmpty = notesCount === 0 && snippetsCount === 0 && flashcardsCount === 0 && projectsCount === 0;

Â  const handleCreateNote = async () => {
Â  Â  const newNote = await addNote({ title: 'New Note', content: '', tags: [] });
Â  Â  if (newNote?.id) navigate(`/notes`, { state: { selectedId: newNote.id } });
Â  };

Â  const renderOnboardingMessage = () => {
Â  Â  if (isAppEmpty) {
Â  Â  Â  const onboardingMarkdown = [
Â  Â  Â  Â  '### ðŸ§  Welcome to Dev2ndBrain!',
Â  Â  Â  Â  '#### âœ… Get Started with Notes',
Â  Â  Â  Â  'Create your first note to capture ideas, document projects, or interlink concepts. Use the `New` button in the Notes section to begin. You can even use a template from the Settings page.',
Â  Â  Â  Â  '#### ðŸ’» Manage Code Snippets',
Â  Â  Â  Â  'Have a handy code snippet you use often? Save it here! Click `New Snippet` in the Snippets section to add your first piece of code. You can also sync it with your GitHub Gists.',
Â  Â  Â  Â  '#### ðŸ“š Start Your Learning Journey',
Â  Â  Â  Â  'Ready to master a new topic? Head over to **Flashcards**, create a new deck, and add some cards. The spaced repetition system will help you remember what matters.',
Â  Â  Â  Â  '>_**Pro Tip:** Use the `Ctrl + K` (or `Cmd + K`) shortcut to open the **Command Palette** and quickly create new items or navigate the app. Happy brain building!_',
Â  Â  Â  ].join('\n');

Â  Â  Â  return (
Â  Â  Â  Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-8 my-8 transition-all duration-300 transform hover:scale-101">
Â  Â  Â  Â  Â  <article className="prose dark:prose-invert prose-lg max-w-none text-left">
Â  Â  Â  Â  Â  Â  <ReactMarkdown>{onboardingMarkdown}</ReactMarkdown>
Â  Â  Â  Â  Â  </article>
Â  Â  Â  Â  </div>
Â  Â  Â  );
Â  Â  }
Â  Â  return null;
Â  };

Â  const renderTabContent = () => {
Â  Â  switch (activeTab) {
Â  Â  Â  case 'projects':
Â  Â  Â  Â  return <RecentProjects projects={recentlyEditedProjects} />;
Â  Â  Â  case 'stats':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-6 h-full flex flex-col">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4 border-b border-gray-200 dark:border-gray-700 pb-2">At a Glance</h2>
Â  Â  Â  Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center text-gray-700 dark:text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Total Notes</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-gray-900 dark:text-white">{notesCount}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center text-gray-700 dark:text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Total Snippets</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-gray-900 dark:text-white">{snippetsCount}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center text-gray-700 dark:text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Total Flashcards</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-gray-900 dark:text-white">{flashcardsCount}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center text-gray-700 dark:text-gray-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Total Projects</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-bold text-gray-900 dark:text-white">{projectsCount}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <ChartPlaceholder />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  case 'reviews':
Â  Â  Â  Â  return <AiReviewsSummary />;
Â  Â  Â  case 'overview':
Â  Â  Â  default:
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
Â  Â  Â  Â  Â  Â  Â  <div className="md:col-span-1 flex flex-col space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  <FlashcardSummary dueCount={dueFlashcardsCount} />
Â  Â  Â  Â  Â  Â  Â  Â  <ImpromptuCard />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="md:col-span-1 lg:col-span-2 xl:col-span-3">
Â  Â  Â  Â  Â  Â  Â  Â  <RecentNotes notes={recentlyEditedNotes} />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl p-6">
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900 dark:text-white mb-4 border-b border-gray-200 dark:border-gray-700 pb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Quick Actions
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleCreateNote} className="flex flex-col items-center justify-center p-6 bg-gray-200 dark:bg-gray-700 rounded-xl text-center hover:bg-gray-300 dark:hover:bg-gray-600 shadow-md hover:shadow-lg transition-all duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <PlusIcon className="h-8 w-8 text-teal-600 dark:text-teal-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="mt-2 font-semibold text-gray-900 dark:text-white">New Note</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => navigate('/snippets')} className="flex flex-col items-center justify-center p-6 bg-gray-200 dark:bg-gray-700 rounded-xl text-center hover:bg-gray-300 dark:hover:bg-gray-600 shadow-md hover:shadow-lg transition-all duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CodeBracketSquareIcon className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="mt-2 font-semibold text-gray-900 dark:text-white">New Snippet</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => navigate('/flashcards')} className="flex flex-col items-center justify-center p-6 bg-gray-200 dark:bg-gray-700 rounded-xl text-center hover:bg-gray-300 dark:hover:bg-gray-600 shadow-md hover:shadow-lg transition-all duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <RectangleStackIcon className="h-8 w-8 text-purple-600 dark:text-purple-400" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="mt-2 font-semibold text-gray-900 dark:text-white">New Deck</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <PopularTags />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  );
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="p-5 md:p-5 lg:p-5">
Â  Â  Â  {renderOnboardingMessage()}
Â  Â  Â  <Tabs activeTab={activeTab} onTabChange={setActiveTab} />
Â  Â  Â  <div className="space-y-8">
Â  Â  Â  Â  {renderTabContent()}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default DashboardPage;